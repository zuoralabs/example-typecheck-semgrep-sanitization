import abc
from typing import Any, Sequence, Type, Union, overload, Callable
from .str_base import SpecialStr


class SanitizedStr(SpecialStr):
    @overload
    def __add__(self, other: Union[SanitizedStr, LiteralStr]) -> SanitizedStr: ...
    @overload
    def __add__(self, other: str) -> str: ...
    @overload
    def __radd__(self, other: Union[SanitizedStr, LiteralStr]) -> SanitizedStr: ...
    @overload
    def __radd__(self, other: str) -> str: ...

class HtmlSanitizedStr(SpecialStr):
    @overload
    def __add__(self, other: LiteralStr) -> HtmlSanitizedStr: ...
    @overload
    def __add__(self, other: HtmlSanitizedStr) -> HtmlSanitizedStr: ...
    @overload
    def __add__(self, other: str) -> str: ...

    def __radd__(self, other: str) -> str: ...

class LiteralStr(SpecialStr):
    @overload
    def __add__(self, other: LiteralStr) -> LiteralStr: ...
    @overload
    def __add__(self, other: HtmlSanitizedStr) -> HtmlSanitizedStr: ...
    @overload
    def __add__(self, other: SanitizedStr) -> SanitizedStr: ...
    @overload
    def __add__(self, other: str) -> str: ...

    # NOTE: do not define __radd__ types if already defined by
    # __add__ from the other type.
    def __radd__(self, other: str) -> str: ...

def sorry_fake_sanitize(x: str) -> HtmlSanitizedStr: ...
def sanitize_for_html(x: str) -> HtmlSanitizedStr: ...

from flask import Flask
RouteFunction = Callable[..., HtmlSanitizedStr]
def safe_route(app: Flask, rule, **options) -> Callable[[RouteFunction], None]: ...
